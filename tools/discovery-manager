#!/bin/bash

# Discovery Management Tool
# Enhanced Evernode Host Discovery System Manager

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BASE_DIR="$(dirname "$SCRIPT_DIR")"
SERVICE_NAME="evernode-discovery"
LOG_FILE="/var/log/${SERVICE_NAME}.log"
CACHE_DIR="/tmp"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging function
log_message() {
    echo -e "${2:-$GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
    if [[ -w "$(dirname "$LOG_FILE")" ]]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
    fi
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Test API endpoint
test_api() {
    local endpoint="$1"
    local description="$2"
    
    if command_exists curl && command_exists jq; then
        local response=$(curl -s "http://localhost/api/${endpoint}" 2>/dev/null)
        if echo "$response" | jq -e '.success' >/dev/null 2>&1; then
            log_message "‚úÖ $description: Working" "$GREEN"
            return 0
        else
            log_message "‚ùå $description: Failed" "$RED"
            return 1
        fi
    else
        log_message "‚ö†Ô∏è  $description: Cannot test (curl/jq not available)" "$YELLOW"
        return 1
    fi
}

# Get service status
get_service_status() {
    if systemctl is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        echo "running"
    elif systemctl is-enabled --quiet "$SERVICE_NAME" 2>/dev/null; then
        echo "stopped"
    elif [[ -f "/etc/systemd/system/${SERVICE_NAME}.service" ]]; then
        echo "installed"
    else
        echo "not_installed"
    fi
}

# Display service status
show_status() {
    local status=$(get_service_status)
    
    log_message "üìä Discovery Service Status" "$CYAN"
    echo ""
    
    case "$status" in
        "running")
            log_message "üü¢ Service Status: Running" "$GREEN"
            if systemctl status "$SERVICE_NAME" --no-pager -l 2>/dev/null | grep -q "Main PID"; then
                local pid=$(systemctl show "$SERVICE_NAME" --property=MainPID --value 2>/dev/null)
                log_message "üî¢ Process ID: $pid" "$BLUE"
            fi
            ;;
        "stopped")
            log_message "üü° Service Status: Stopped (but installed)" "$YELLOW"
            ;;
        "installed")
            log_message "üîµ Service Status: Installed (not enabled)" "$BLUE"
            ;;
        "not_installed")
            log_message "üî¥ Service Status: Not installed" "$RED"
            ;;
    esac
    
    # Check log file
    if [[ -f "$LOG_FILE" ]]; then
        log_message "üìÑ Log File: $LOG_FILE" "$BLUE"
        local log_size=$(du -h "$LOG_FILE" 2>/dev/null | cut -f1)
        log_message "üìä Log Size: $log_size" "$BLUE"
        
        echo ""
        log_message "üìù Recent Log Entries:" "$PURPLE"
        if [[ -r "$LOG_FILE" ]]; then
            tail -5 "$LOG_FILE" 2>/dev/null | while read -r line; do
                echo "   $line"
            done
        else
            log_message "   Cannot read log file (permission denied)" "$YELLOW"
        fi
    else
        log_message "üìÑ Log File: Not found" "$YELLOW"
    fi
    
    echo ""
    log_message "üåê API Status:" "$PURPLE"
    test_api "host-discovery.php?action=status" "Host Discovery API"
    test_api "smart-recommendations.php?action=stats" "Smart Recommendations API"
    test_api "smart-urls.php?action=list" "Smart URLs API"
    test_api "deployment-status.php?action=status&deployment_id=test" "Deployment Status API"
}

# Run discovery
run_discovery() {
    log_message "üîç Running manual discovery..." "$CYAN"
    
    if command_exists curl; then
        local response=$(curl -s "http://localhost/api/host-discovery.php?action=discover&refresh=true" 2>/dev/null)
        
        if command_exists jq && echo "$response" | jq -e '.success' >/dev/null 2>&1; then
            local total=$(echo "$response" | jq -r '.total_discovered // 0')
            log_message "‚úÖ Discovery completed: Found $total enhanced hosts" "$GREEN"
            
            if [[ "$total" -gt 0 ]]; then
                echo ""
                log_message "üèÜ Top Quality Hosts:" "$PURPLE"
                echo "$response" | jq -r '.hosts[]? | select(.quality_score >= 70) | "   \(.host) - Quality: \(.quality_score)/100 (\(.location // "Unknown"))"' 2>/dev/null || true
            fi
        else
            log_message "‚ùå Discovery failed or returned invalid response" "$RED"
            if [[ -n "$response" ]]; then
                echo "Response: $response"
            fi
        fi
    else
        log_message "‚ùå curl not available - cannot run discovery" "$RED"
    fi
}

# Announce host
announce_host() {
    log_message "üì¢ Announcing to network..." "$CYAN"
    
    if command_exists curl; then
        local response=$(curl -s "http://localhost/api/host-discovery.php?action=announce" 2>/dev/null)
        
        if command_exists jq && echo "$response" | jq -e '.success' >/dev/null 2>&1; then
            local host_info=$(echo "$response" | jq -r '.host_info.host // "unknown"')
            log_message "‚úÖ Host announced successfully: $host_info" "$GREEN"
        else
            log_message "‚ùå Announcement failed" "$RED"
            if [[ -n "$response" ]]; then
                echo "Response: $response"
            fi
        fi
    else
        log_message "‚ùå curl not available - cannot announce" "$RED"
    fi
}

# Show peers
show_peers() {
    log_message "ü§ù Current peer network:" "$CYAN"
    
    if command_exists curl; then
        local response=$(curl -s "http://localhost/api/host-discovery.php?action=peers" 2>/dev/null)
        
        if command_exists jq && echo "$response" | jq -e '.success' >/dev/null 2>&1; then
            local peer_count=$(echo "$response" | jq -r '.peers | length')
            log_message "üìä Total Peers: $peer_count" "$BLUE"
            
            if [[ "$peer_count" -gt 0 ]]; then
                echo ""
                log_message "üåê Peer Details:" "$PURPLE"
                echo "$response" | jq -r '.peer_details[]? | "   \(.host) - Quality: \(.quality_score)/100 - Last: \(.last_checked)"' 2>/dev/null || true
            else
                log_message "   No peers discovered yet" "$YELLOW"
            fi
        else
            log_message "‚ùå Failed to get peer information" "$RED"
        fi
    else
        log_message "‚ùå curl not available - cannot get peers" "$RED"
    fi
}

# Get recommendations
get_recommendations() {
    log_message "üí° Getting smart recommendations..." "$CYAN"
    
    if command_exists curl; then
        local response=$(curl -s "http://localhost/api/smart-recommendations.php?action=list" 2>/dev/null)
        
        if command_exists jq && echo "$response" | jq -e '.success' >/dev/null 2>&1; then
            local host_count=$(echo "$response" | jq -r '.hosts | length')
            log_message "üìä Recommended Hosts: $host_count" "$BLUE"
            
            if [[ "$host_count" -gt 0 ]]; then
                echo ""
                log_message "üèÜ Current Recommendations:" "$PURPLE"
                echo "$response" | jq -r '.hosts[]? | "   \(.name) (\(.host)) - Quality: \(.quality_score)/100"' 2>/dev/null || true
            else
                log_message "   No recommendations available" "$YELLOW"
            fi
        else
            log_message "‚ùå Failed to get recommendations" "$RED"
        fi
    else
        log_message "‚ùå curl not available - cannot get recommendations" "$RED"
    fi
}

# Clear cache
clear_cache() {
    log_message "üßπ Clearing discovery cache..." "$CYAN"
    
    local cache_files=(
        "/tmp/enhanced_hosts_cache.json"
        "/tmp/host_discovery_cache.json"
        "/tmp/smart_recommendations_cache.json"
    )
    
    local cleared=0
    for cache_file in "${cache_files[@]}"; do
        if [[ -f "$cache_file" ]]; then
            if rm -f "$cache_file" 2>/dev/null; then
                log_message "   Removed: $(basename "$cache_file")" "$GREEN"
                ((cleared++))
            else
                log_message "   Failed to remove: $(basename "$cache_file")" "$RED"
            fi
        fi
    done
    
    if [[ "$cleared" -gt 0 ]]; then
        log_message "‚úÖ Cache cleared ($cleared files removed)" "$GREEN"
    else
        log_message "‚ÑπÔ∏è  No cache files found to clear" "$BLUE"
    fi
}

# Install service
install_service() {
    log_message "üì¶ Installing discovery service..." "$CYAN"
    
    local service_file="$BASE_DIR/services/evernode-discovery.service"
    local daemon_file="$BASE_DIR/services/evernode-discovery"
    
    # Check if source files exist
    if [[ ! -f "$service_file" ]]; then
        log_message "‚ùå Service file not found: $service_file" "$RED"
        return 1
    fi
    
    if [[ ! -f "$daemon_file" ]]; then
        log_message "‚ùå Daemon file not found: $daemon_file" "$RED"
        return 1
    fi
    
    # Copy files
    if sudo cp "$service_file" "/etc/systemd/system/" 2>/dev/null; then
        log_message "   Installed service file" "$GREEN"
    else
        log_message "‚ùå Failed to install service file" "$RED"
        return 1
    fi
    
    if sudo cp "$daemon_file" "/usr/local/bin/" 2>/dev/null; then
        log_message "   Installed daemon file" "$GREEN"
    else
        log_message "‚ùå Failed to install daemon file" "$RED"
        return 1
    fi
    
    # Set permissions
    if sudo chmod +x "/usr/local/bin/evernode-discovery" 2>/dev/null; then
        log_message "   Set executable permissions" "$GREEN"
    else
        log_message "‚ö†Ô∏è  Warning: Could not set executable permissions" "$YELLOW"
    fi
    
    # Reload systemd
    if sudo systemctl daemon-reload 2>/dev/null; then
        log_message "   Reloaded systemd" "$GREEN"
    else
        log_message "‚ö†Ô∏è  Warning: Could not reload systemd" "$YELLOW"
    fi
    
    log_message "‚úÖ Discovery service installed successfully" "$GREEN"
    log_message "üí° Run 'discovery-manager start' to start the service" "$BLUE"
}

# Uninstall service
uninstall_service() {
    log_message "üóëÔ∏è Uninstalling discovery service..." "$CYAN"
    
    # Stop and disable service
    sudo systemctl stop "$SERVICE_NAME" 2>/dev/null || true
    sudo systemctl disable "$SERVICE_NAME" 2>/dev/null || true
    
    # Remove files
    if sudo rm -f "/etc/systemd/system/${SERVICE_NAME}.service" 2>/dev/null; then
        log_message "   Removed service file" "$GREEN"
    fi
    
    if sudo rm -f "/usr/local/bin/evernode-discovery" 2>/dev/null; then
        log_message "   Removed daemon file" "$GREEN"
    fi
    
    # Reload systemd
    sudo systemctl daemon-reload 2>/dev/null || true
    
    log_message "‚úÖ Discovery service uninstalled" "$GREEN"
}

# Start service
start_service() {
    log_message "üöÄ Starting discovery service..." "$CYAN"
    
    local status=$(get_service_status)
    
    if [[ "$status" == "not_installed" ]]; then
        log_message "‚ùå Service not installed. Run 'discovery-manager install' first" "$RED"
        return 1
    fi
    
    if sudo systemctl enable "$SERVICE_NAME" 2>/dev/null; then
        log_message "   Enabled service" "$GREEN"
    else
        log_message "‚ö†Ô∏è  Could not enable service" "$YELLOW"
    fi
    
    if sudo systemctl start "$SERVICE_NAME" 2>/dev/null; then
        log_message "‚úÖ Discovery service started" "$GREEN"
        sleep 2
        show_status
    else
        log_message "‚ùå Failed to start discovery service" "$RED"
        log_message "üí° Check logs with: journalctl -u $SERVICE_NAME -f" "$BLUE"
        return 1
    fi
}

# Stop service
stop_service() {
    log_message "üõë Stopping discovery service..." "$CYAN"
    
    if sudo systemctl stop "$SERVICE_NAME" 2>/dev/null; then
        log_message "   Stopped service" "$GREEN"
    else
        log_message "‚ö†Ô∏è  Service was not running" "$YELLOW"
    fi
    
    if sudo systemctl disable "$SERVICE_NAME" 2>/dev/null; then
        log_message "   Disabled service" "$GREEN"
    else
        log_message "‚ö†Ô∏è  Service was not enabled" "$YELLOW"
    fi
    
    log_message "‚úÖ Discovery service stopped" "$GREEN"
}

# Test all APIs
test_all_apis() {
    log_message "üß™ Testing discovery system..." "$CYAN"
    echo ""
    
    local failed=0
    
    log_message "1. Testing host discovery API..." "$BLUE"
    if ! test_api "host-discovery.php?action=discover" "Host Discovery"; then
        ((failed++))
    fi
    
    echo ""
    log_message "2. Testing smart recommendations API..." "$BLUE"
    if ! test_api "smart-recommendations.php?action=list" "Smart Recommendations"; then
        ((failed++))
    fi
    
    echo ""
    log_message "3. Testing smart URLs API..." "$BLUE"
    if ! test_api "smart-urls.php?action=list" "Smart URLs"; then
        ((failed++))
    fi
    
    echo ""
    log_message "4. Testing deployment status API..." "$BLUE"
    if ! test_api "deployment-status.php?action=status&deployment_id=test" "Deployment Status"; then
        ((failed++))
    fi
    
    echo ""
    if [[ "$failed" -eq 0 ]]; then
        log_message "‚úÖ All tests passed! Discovery system is working correctly" "$GREEN"
    else
        log_message "‚ùå $failed tests failed. Check API installation and configuration" "$RED"
    fi
}

# Show help
show_help() {
    echo -e "${CYAN}Discovery Manager v3.0${NC}"
    echo -e "${BLUE}Enhanced Evernode Host Discovery System Manager${NC}"
    echo ""
    echo -e "${YELLOW}Usage:${NC} $0 {command}"
    echo ""
    echo -e "${YELLOW}Service Commands:${NC}"
    echo "  start          - Start the discovery service"
    echo "  stop           - Stop the discovery service"
    echo "  restart        - Restart the discovery service"
    echo "  status         - Show service status and network stats"
    echo ""
    echo -e "${YELLOW}Discovery Commands:${NC}"
    echo "  discover       - Run manual host discovery"
    echo "  announce       - Announce this host to the network"
    echo "  peers          - Show current peer network"
    echo "  recommendations - Get smart host recommendations"
    echo ""
    echo -e "${YELLOW}Maintenance Commands:${NC}"
    echo "  clear-cache    - Clear discovery cache files"
    echo "  install        - Install discovery service"
    echo "  uninstall      - Remove discovery service"
    echo "  test           - Test all discovery APIs"
    echo "  logs           - Show recent service logs"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  $0 status      # Check current system status"
    echo "  $0 discover    # Find other enhanced hosts"
    echo "  $0 test        # Verify all APIs are working"
    echo ""
}

# Show logs
show_logs() {
    log_message "üìã Recent service logs:" "$CYAN"
    echo ""
    
    if command_exists journalctl; then
        journalctl -u "$SERVICE_NAME" --no-pager -n 20 2>/dev/null || {
            log_message "‚ùå Cannot access systemd logs" "$RED"
        }
    fi
    
    if [[ -f "$LOG_FILE" && -r "$LOG_FILE" ]]; then
        echo ""
        log_message "üìÑ Discovery log file ($LOG_FILE):" "$PURPLE"
        tail -10 "$LOG_FILE" 2>/dev/null || {
            log_message "‚ùå Cannot read log file" "$RED"
        }
    fi
}

# Main command handler
case "${1:-help}" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        stop_service
        sleep 2
        start_service
        ;;
    status)
        show_status
        ;;
    discover)
        run_discovery
        ;;
    announce)
        announce_host
        ;;
    peers)
        show_peers
        ;;
    recommendations)
        get_recommendations
        ;;
    clear-cache)
        clear_cache
        ;;
    install)
        install_service
        ;;
    uninstall)
        uninstall_service
        ;;
    test)
        test_all_apis
        ;;
    logs)
        show_logs
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        log_message "‚ùå Unknown command: $1" "$RED"
        echo ""
        show_help
        exit 1
        ;;
esac

exit 0
