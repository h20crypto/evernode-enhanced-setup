<?php
/**
 * Enhanced Host Info API - Secure Template
 * Uses configuration file instead of hardcoded values
 */

header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

// Load configuration
require_once __DIR__ . '/../config/config.php';

// Get host information from configuration and Evernode CLI
$host_info = getHostInfo();

// Enhanced features list (dynamic based on what's actually installed)
$enhanced_features = [
    'Enhanced Discovery',
    'Cluster Manager',
    'Real-time Monitoring',
    'Auto Deploy Commands',
    'Commission System',
    'Live Data APIs'
];

// Check if files exist to determine what features are available
if (file_exists(__DIR__ . '/enhanced-search.php')) {
    $enhanced_features[] = 'Advanced Search';
}
if (file_exists(__DIR__ . '/../cluster/dapp-manager.html')) {
    $enhanced_features[] = 'dApp Manager';
}
if (file_exists(__DIR__ . '/../monitoring-dashboard.html')) {
    $enhanced_features[] = 'System Monitoring';
}

// Build response using configuration values
$response_data = [
    'xahau_address' => $host_info['xahau_address'],
    'domain' => $host_info['domain'],
    'enhanced' => true,
    'uri' => "https://{$host_info['domain']}",
    'features' => $enhanced_features,
    'quality_score' => 95, // High score for enhanced hosts
    'version' => $host_info['version'],
    'system' => $host_info['system'],
    'capabilities' => $host_info['capabilities'],
    'commission_rate' => $host_info['commission_rate'],
    'license_price' => $host_info['license_price'],
    'instance_limit' => $host_info['instance_limit'],
    'last_updated' => $host_info['last_updated']
];

echo json_encode([
    'success' => true,
    'host' => $response_data,
    'timestamp' => time(),
    'api_version' => API_VERSION
], JSON_PRETTY_PRINT);
?>

---

<?php
/**
 * Enhanced Instance Count API - Secure Template  
 * Uses configuration file and real Evernode data
 */

header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization');

if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
    http_response_code(204);
    exit();
}

// Load configuration
require_once __DIR__ . '/../config/config.php';

try {
    // Get real container information using Docker commands
    $container_count = 0;
    $container_details = [];
    
    $docker_output = shell_exec('docker ps --format "{{.Names}}" 2>/dev/null');
    if ($docker_output) {
        $containers = array_filter(explode("\n", trim($docker_output)));
        $container_count = count($containers);
        
        // Group by user (sashi prefixed containers)
        foreach ($containers as $container) {
            if (strpos($container, 'sashi') === 0) {
                $user = explode('_', $container)[0];
                if (!isset($container_details[$user])) {
                    $container_details[$user] = [];
                }
                $container_details[$user][] = $container;
            }
        }
    }
    
    // Get instance limit from configuration
    $total_instances = EVERNODE_INSTANCE_LIMIT;
    
    // Try to get real limit from Evernode CLI if available
    $evernode_total = shell_exec('evernode totalins 2>/dev/null');
    if ($evernode_total && is_numeric(trim($evernode_total))) {
        $total_instances = (int)trim($evernode_total);
    }
    
    // Calculate availability
    $available = max(0, $total_instances - $container_count);
    $usage_percentage = $total_instances > 0 ? round(($container_count / $total_instances) * 100) : 0;
    
    // Determine status
    $status = 'available';
    $status_message = 'âœ… Ready for new deployments!';
    
    if ($usage_percentage >= 90) {
        $status = 'full';
        $status_message = 'ðŸ”´ Host at capacity';
    } elseif ($usage_percentage >= 70) {
        $status = 'limited';
        $status_message = 'âš¡ Limited slots available';
    }
    
    // Format container details for response
    $formatted_details = [];
    foreach ($container_details as $user => $containers) {
        $formatted_details[] = [
            'user' => $user,
            'container_count' => count($containers),
            'containers' => implode(', ', $containers)
        ];
    }
    
    // Get host information from configuration
    $host_info = getHostInfo();
    
    // Build response
    $response = [
        'total' => $total_instances,
        'used' => $container_count,
        'available' => $available,
        'usage_percentage' => $usage_percentage,
        'status' => $status,
        'status_message' => $status_message,
        'last_updated' => date('Y-m-d H:i:s'),
        'data_source' => 'actual_containers',
        'host_info' => [
            'address' => $host_info['xahau_address'],
            'domain' => $host_info['domain'],
            'version' => $host_info['version'],
            'lease_amount' => '0.005 EVR/hour' // This should come from real Evernode data
        ],
        'debug_info' => [
            'containers_running' => $container_count,
            'container_details' => $formatted_details,
            'counting_method' => 'docker_api',
            'config_limit' => EVERNODE_INSTANCE_LIMIT
        ],
        'success' => true
    ];
    
    echo json_encode($response, JSON_PRETTY_PRINT);
    
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode([
        'error' => 'Failed to get instance data',
        'message' => $e->getMessage(),
        'success' => false
    ], JSON_PRETTY_PRINT);
}
?>

---

<?php
/**
 * Admin Authentication API - Secure Template
 * Handles secure admin login using password hashing
 */

header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

// Load configuration
require_once __DIR__ . '/../config/config.php';

// Handle different admin endpoints
$action = $_GET['action'] ?? $_POST['action'] ?? 'check';

switch ($action) {
    case 'login':
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            http_response_code(405);
            echo json_encode(['success' => false, 'error' => 'POST required']);
            exit;
        }
        
        $input = json_decode(file_get_contents('php://input'), true);
        $password = $input['password'] ?? '';
        
        if (empty($password)) {
            echo json_encode(['success' => false, 'error' => 'Password required']);
            exit;
        }
        
        // Verify password using secure hash comparison
        if (verifyAdminPassword($password)) {
            // Start secure session
            session_start();
            session_regenerate_id(true);
            $_SESSION['admin_authenticated'] = true;
            $_SESSION['admin_login_time'] = time();
            
            echo json_encode([
                'success' => true,
                'message' => 'Admin access granted',
                'expires_in' => 3600 // 1 hour
            ]);
        } else {
            // Add rate limiting here in production
            sleep(1); // Basic rate limiting
            echo json_encode(['success' => false, 'error' => 'Invalid credentials']);
        }
        break;
        
    case 'check':
        session_start();
        
        $is_admin = isset($_SESSION['admin_authenticated']) && 
                   $_SESSION['admin_authenticated'] === true &&
                   (time() - ($_SESSION['admin_login_time'] ?? 0)) < 3600; // 1 hour timeout
        
        echo json_encode([
            'success' => true,
            'is_admin' => $is_admin,
            'session_valid' => $is_admin
        ]);
        break;
        
    case 'logout':
        session_start();
        session_destroy();
        
        echo json_encode([
            'success' => true,
            'message' => 'Logged out successfully'
        ]);
        break;
        
    case 'config':
        // Return safe configuration (no sensitive data)
        session_start();
        
        $is_admin = isset($_SESSION['admin_authenticated']) && $_SESSION['admin_authenticated'] === true;
        
        $safe_config = [
            'domain' => HOST_DOMAIN,
            'version' => API_VERSION,
            'system' => SYSTEM_NAME,
            'enhanced' => true
        ];
        
        if ($is_admin) {
            // Add admin-only config
            $safe_config['instance_limit'] = EVERNODE_INSTANCE_LIMIT;
            $safe_config['commission_rate'] = COMMISSION_RATE;
        }
        
        echo json_encode([
            'success' => true,
            'config' => $safe_config,
            'is_admin' => $is_admin
        ]);
        break;
        
    default:
        http_response_code(404);
        echo json_encode(['success' => false, 'error' => 'Unknown action']);
}
?>
