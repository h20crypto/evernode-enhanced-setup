#!/bin/bash

# ==========================================
# Evernode Enhanced - Unified CLI Tool v3.0
# Replaces scattered scripts with single interface
# ==========================================

set -e

VERSION="3.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
GITHUB_BASE="https://raw.githubusercontent.com/h20crypto/evernode-enhanced-setup/main"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ==========================================
# UTILITY FUNCTIONS
# ==========================================

print_header() {
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                 🚀 Evernode Enhanced CLI v$VERSION                ║"
    echo "║              Unified Management Interface                    ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_step() {
    echo -e "${CYAN}🔧 $1${NC}"
}

# ==========================================
# HELP SYSTEM
# ==========================================

show_help() {
    print_header
    echo -e "${BLUE}USAGE:${NC}"
    echo "  evernode-enhanced <command> [options]"
    echo ""
    echo -e "${BLUE}COMMANDS:${NC}"
    echo ""
    echo -e "${GREEN}📦 Installation & Updates:${NC}"
    echo "  install               - Install enhanced system from scratch"
    echo "  update                - Update to latest version"
    echo "  reinstall             - Reinstall everything (destructive)"
    echo ""
    echo -e "${GREEN}🔧 System Management:${NC}"
    echo "  debug                 - Run comprehensive diagnostics"
    echo "  status                - Show system health and status"
    echo "  restart               - Restart all services"
    echo "  logs                  - Show system logs"
    echo ""
    echo -e "${GREEN}🌐 Network Operations:${NC}"
    echo "  network               - Show network discovery status"
    echo "  scan                  - Scan for other enhanced hosts"
    echo "  hosts                 - List discovered hosts"
    echo "  announce              - Announce this host to network"
    echo ""
    echo -e "${GREEN}💰 Pricing & Analytics:${NC}"
    echo "  pricing               - Show current EVR/XRP rates"
    echo "  commission            - Show commission earnings"
    echo "  roi                   - Calculate ROI scenarios"
    echo "  earnings              - Show detailed earnings report"
    echo ""
    echo -e "${GREEN}🔄 Maintenance:${NC}"
    echo "  cache                 - Manage cache (clear/status)"
    echo "  backup                - Backup configuration and data"
    echo "  optimize              - Optimize performance"
    echo "  cleanup               - Clean up old files"
    echo ""
    echo -e "${BLUE}EXAMPLES:${NC}"
    echo "  evernode-enhanced install"
    echo "  evernode-enhanced debug --verbose"
    echo "  evernode-enhanced pricing --format json"
    echo "  evernode-enhanced network --refresh"
    echo ""
    echo -e "${BLUE}OPTIONS:${NC}"
    echo "  --verbose, -v         - Verbose output"
    echo "  --quiet, -q           - Quiet mode"
    echo "  --format json         - JSON output format"
    echo "  --help, -h            - Show this help"
    echo ""
}

# ==========================================
# INSTALLATION COMMANDS
# ==========================================

cmd_install() {
    print_header
    print_info "🚀 Installing Evernode Enhanced System..."
    
    if [[ -f "$SCRIPT_DIR/quick-setup.sh" ]]; then
        exec "$SCRIPT_DIR/quick-setup.sh" "$@"
    else
        print_step "Downloading and running installer..."
        curl -fsSL "$GITHUB_BASE/scripts/quick-setup.sh" | bash -s -- "$@"
    fi
}

cmd_update() {
    print_header
    print_info "🔄 Updating Evernode Enhanced System..."
    
    print_step "Downloading latest version..."
    curl -fsSL "$GITHUB_BASE/scripts/quick-setup.sh" | bash -s -- --update
    
    print_step "Updating CLI tool..."
    curl -fsSL "$GITHUB_BASE/scripts/evernode-enhanced" -o /tmp/evernode-enhanced-new
    sudo mv /tmp/evernode-enhanced-new /usr/local/bin/evernode-enhanced
    sudo chmod +x /usr/local/bin/evernode-enhanced
    
    print_success "✅ Update completed!"
}

cmd_reinstall() {
    print_header
    print_warning "⚠️  This will completely reinstall the enhanced system."
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_step "Backing up current data..."
        cmd_backup --auto
        
        print_step "Reinstalling system..."
        curl -fsSL "$GITHUB_BASE/scripts/quick-setup.sh" | bash -s -- --force
    else
        print_info "Reinstall cancelled."
    fi
}

# ==========================================
# DIAGNOSTIC COMMANDS
# ==========================================

cmd_debug() {
    print_header
    print_info "🔍 Running Enhanced Evernode Diagnostics..."
    echo ""
    
    # System Information
    print_step "System Information:"
    echo "  OS: $(lsb_release -d 2>/dev/null | cut -f2 || uname -s)"
    echo "  Kernel: $(uname -r)"
    echo "  Hostname: $(hostname -f 2>/dev/null || hostname)"
    echo "  IP Address: $(curl -s ifconfig.me 2>/dev/null || echo 'Unknown')"
    echo ""
    
    # Service Status
    print_step "Service Status:"
    services=("nginx" "php7.4-fpm" "php8.1-fpm" "php8.2-fpm" "php8.3-fpm")
    for service in "${services[@]}"; do
        if systemctl is-active --quiet "$service" 2>/dev/null; then
            print_success "  $service: Running"
        elif systemctl list-unit-files | grep -q "$service"; then
            print_error "  $service: Stopped"
        fi
    done
    echo ""
    
    # Evernode CLI Tests
    print_step "Evernode CLI Tests:"
    if command -v evernode >/dev/null 2>&1; then
        print_success "  Evernode CLI: Installed"
        
        # Test various evernode commands
        local tests=(
            "totalins:Total Instances"
            "activeins:Active Instances" 
            "hostaddress:Host Address"
            "leaseamt:Lease Amount"
        )
        
        for test in "${tests[@]}"; do
            local cmd="${test%%:*}"
            local desc="${test##*:}"
            local result=$(evernode config "$cmd" 2>/dev/null || echo "Failed")
            
            if [[ "$result" != "Failed" && -n "$result" ]]; then
                print_success "  $desc: $result"
            else
                print_warning "  $desc: Not available"
            fi
        done
    else
        print_error "  Evernode CLI: Not installed"
    fi
    echo ""
    
    # Container Analysis
    print_step "Container Analysis:"
    local sashi_count=$(getent passwd | grep sashi | wc -l 2>/dev/null || echo "0")
    print_info "  Sashimono users: $sashi_count"
    
    if [[ $sashi_count -gt 0 ]]; then
        local total_containers=0
        for user in $(getent passwd | grep sashi | cut -d: -f1 2>/dev/null); do
            local containers=$(sudo -u "$user" docker ps -q 2>/dev/null | wc -l || echo "0")
            if [[ $containers -gt 0 ]]; then
                print_info "  $user: $containers containers"
                total_containers=$((total_containers + containers))
            fi
        done
        print_success "  Total running containers: $total_containers"
    fi
    echo ""
    
    # API Tests
    print_step "API Tests:"
    local api_tests=(
        "instance-count:Instance Count API"
        "crypto-rates:Crypto Rates API"
        "status:Status API"
    )
    
    for test in "${api_tests[@]}"; do
        local endpoint="${test%%:*}"
        local desc="${test##*:}"
        
        if curl -f -s "http://localhost/api/?endpoint=$endpoint" >/dev/null 2>&1; then
            print_success "  $desc: Working"
        else
            print_error "  $desc: Failed"
        fi
    done
    echo ""
    
    # File System Check
    print_step "File System Check:"
    local required_dirs=("/var/www/html" "/var/www/html/api" "/var/www/html/data")
    for dir in "${required_dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            local files=$(find "$dir" -type f | wc -l)
            print_success "  $dir: $files files"
        else
            print_error "  $dir: Missing"
        fi
    done
    echo ""
    
    # Network Connectivity
    print_step "Network Connectivity:"
    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        print_success "  Internet: Connected"
    else
        print_error "  Internet: No connection"
    fi
    
    if curl -s https://api.coingecko.com/api/v3/ping >/dev/null 2>&1; then
        print_success "  CoinGecko API: Accessible"
    else
        print_warning "  CoinGecko API: Not accessible"
    fi
    echo ""
    
    print_success "🔍 Diagnostic complete!"
}

cmd_status() {
    print_header
    print_info "📊 System Status Overview"
    echo ""
    
    # Quick status check
    local api_health=$(curl -s http://localhost/api/?endpoint=status 2>/dev/null | jq -r '.status' 2>/dev/null || echo "unknown")
    local nginx_status=$(systemctl is-active nginx 2>/dev/null || echo "inactive")
    
    echo "  🌐 API Health: $api_health"
    echo "  🔧 Nginx Status: $nginx_status"
    echo "  📅 Last Check: $(date)"
    
    # Instance data
    local instance_data=$(curl -s http://localhost/api/?endpoint=instance-count 2>/dev/null)
    if [[ -n "$instance_data" ]]; then
        local total=$(echo "$instance_data" | jq -r '.total' 2>/dev/null || echo "Unknown")
        local used=$(echo "$instance_data" | jq -r '.used' 2>/dev/null || echo "Unknown")
        local available=$(echo "$instance_data" | jq -r '.available' 2>/dev/null || echo "Unknown")
        
        echo "  📊 Instances: $used/$total used, $available available"
    fi
    
    echo ""
}

# ==========================================
# NETWORK COMMANDS
# ==========================================

cmd_network() {
    local refresh_flag=""
    if [[ "$1" == "--refresh" ]]; then
        refresh_flag="?refresh=1"
    fi
    
    print_header
    print_info "🌐 Network Discovery Status"
    echo ""
    
    local network_data=$(curl -s "http://localhost/api/?endpoint=network-discovery$refresh_flag" 2>/dev/null)
    
    if [[ -n "$network_data" ]]; then
        echo "$network_data" | jq . 2>/dev/null || echo "$network_data"
    else
        print_warning "Network discovery API not available"
    fi
}

cmd_scan() {
    print_header
    print_info "🔍 Scanning for Enhanced Hosts..."
    
    curl -s "http://localhost/api/?endpoint=network-discovery&action=scan" | jq . 2>/dev/null || {
        print_error "Scan failed - API not available"
    }
}

cmd_hosts() {
    print_header
    print_info "📋 Discovered Enhanced Hosts"
    echo ""
    
    local hosts_data=$(curl -s "http://localhost/api/?endpoint=host-discovery&action=list" 2>/dev/null)
    
    if [[ -n "$hosts_data" ]]; then
        echo "$hosts_data" | jq -r '.data.hosts[] | "\(.domain) - Quality: \(.quality_score)/100 - \(.status)"' 2>/dev/null || {
            echo "$hosts_data"
        }
    else
        print_warning "No hosts data available"
    fi
}

# ==========================================
# PRICING COMMANDS  
# ==========================================

cmd_pricing() {
    local format="table"
    if [[ "$1" == "--format" && "$2" == "json" ]]; then
        format="json"
    fi
    
    print_header
    print_info "💰 Current EVR/XRP Pricing"
    echo ""
    
    local pricing_data=$(curl -s "http://localhost/api/?endpoint=crypto-rates" 2>/dev/null)
    
    if [[ "$format" == "json" ]]; then
        echo "$pricing_data" | jq . 2>/dev/null || echo "$pricing_data"
    else
        # Parse and display in table format
        local evr_rate=$(echo "$pricing_data" | jq -r '.data.evr.rate' 2>/dev/null || echo "0.22")
        local xrp_rate=$(echo "$pricing_data" | jq -r '.data.xrp.rate' 2>/dev/null || echo "0.42")
        local commission=$(echo "$pricing_data" | jq -r '.data.commission.usd.display' 2>/dev/null || echo "$10.00")
        
        echo "  💎 EVR Price: \$$evr_rate USD"
        echo "  🪙 XRP Price: \$$xrp_rate USD"
        echo "  💰 Commission per License: $commission"
        echo ""
        
        print_info "📊 Daily Hosting Costs:"
        echo "  • Cheap hosts: ~\$0.00005/day"
        echo "  • Medium hosts: ~\$0.027/day" 
        echo "  • Premium hosts: ~\$0.108/day"
        echo ""
    fi
}

cmd_commission() {
    print_header
    print_info "💎 Commission Earnings Overview"
    echo ""
    
    # This would integrate with actual earnings tracking
    local earnings_data=$(curl -s "http://localhost/api/?endpoint=commission" 2>/dev/null)
    
    if [[ -n "$earnings_data" ]]; then
        echo "$earnings_data" | jq . 2>/dev/null || echo "$earnings_data"
    else
        print_info "📈 Commission System:"
        echo "  • Rate: 20% per license sale"
        echo "  • License Price: \$49.99"
        echo "  • Your Commission: \$10.00 per sale"
        echo ""
        echo "  💰 Potential Monthly Earnings:"
        echo "    → 5 sales: \$50/month"
        echo "    → 10 sales: \$100/month"
        echo "    → 30 sales: \$300/month"
    fi
}

# ==========================================
# MAINTENANCE COMMANDS
# ==========================================

cmd_cache() {
    local action="$1"
    
    case "$action" in
        "clear")
            print_step "Clearing cache..."
            rm -rf /var/www/html/data/cache/* 2>/dev/null || true
            curl -s "http://localhost/api/?endpoint=status&clear_cache=1" >/dev/null 2>&1 || true
            print_success "Cache cleared"
            ;;
        "status")
            print_info "Cache Status:"
            local cache_dir="/var/www/html/data/cache"
            if [[ -d "$cache_dir" ]]; then
                local file_count=$(find "$cache_dir" -type f | wc -l)
                local cache_size=$(du -sh "$cache_dir" 2>/dev/null | cut -f1 || echo "Unknown")
                echo "  Files: $file_count"
                echo "  Size: $cache_size"
            else
                echo "  Cache directory not found"
            fi
            ;;
        *)
            echo "Usage: evernode-enhanced cache {clear|status}"
            ;;
    esac
}

cmd_backup() {
    local auto_mode=""
    if [[ "$1" == "--auto" ]]; then
        auto_mode="true"
    fi
    
    print_step "Creating backup..."
    
    local backup_dir="/opt/evernode-enhanced/backups"
    local backup_file="$backup_dir/backup-$(date +%Y%m%d-%H%M%S).tar.gz"
    
    mkdir -p "$backup_dir"
    
    tar -czf "$backup_file" \
        -C /var/www/html \
        --exclude='data/cache/*' \
        . 2>/dev/null || true
    
    if [[ -f "$backup_file" ]]; then
        print_success "Backup created: $backup_file"
        
        # Keep only last 5 backups
        cd "$backup_dir" && ls -t backup-*.tar.gz | tail -n +6 | xargs rm -f 2>/dev/null || true
    else
        print_error "Backup failed"
    fi
}

# ==========================================
# MAIN COMMAND DISPATCHER
# ==========================================

main() {
    local command="$1"
    shift || true
    
    case "$command" in
        "install")
            cmd_install "$@"
            ;;
        "update")
            cmd_update "$@"
            ;;
        "reinstall")
            cmd_reinstall "$@"
            ;;
        "debug")
            cmd_debug "$@"
            ;;
        "status")
            cmd_status "$@"
            ;;
        "network")
            cmd_network "$@"
            ;;
        "scan")
            cmd_scan "$@"
            ;;
        "hosts")
            cmd_hosts "$@"
            ;;
        "pricing")
            cmd_pricing "$@"
            ;;
        "commission")
            cmd_commission "$@"
            ;;
        "cache")
            cmd_cache "$@"
            ;;
        "backup")
            cmd_backup "$@"
            ;;
        "restart")
            print_step "Restarting services..."
            sudo systemctl restart nginx php*-fpm 2>/dev/null || true
            print_success "Services restarted"
            ;;
        "logs")
            echo "=== Nginx Logs ==="
            sudo tail -n 20 /var/log/nginx/error.log 2>/dev/null || echo "No nginx logs"
            echo ""
            echo "=== PHP Logs ==="
            sudo tail -n 20 /var/log/php*fpm.log 2>/dev/null || echo "No PHP logs"
            ;;
        "version"|"--version"|"-V")
            echo "Evernode Enhanced CLI v$VERSION"
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
